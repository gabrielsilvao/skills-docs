{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p> pod_manifests.yaml<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n    namespace: test\nspec:\n</code></pre>"},{"location":"#emojis","title":"Emojis","text":""},{"location":"DAC/","title":"DAC - Dynamic Access Control Windows Server","text":""},{"location":"DAC/#about","title":"About","text":""},{"location":"DAC/#configuration","title":"Configuration","text":""},{"location":"AWS/CodeArtifact/","title":"CodeAertifact - Hands On","text":""},{"location":"AWS/CodeArtifact/#create-a-codeartifact-repository","title":"Create a CodeArtifact repository","text":"<p>Configure your pypi client using this AWS CLI CodeArtifact command (login authorization expires in 12 hours)</p> <p><code>aws codeartifact login --tool pip --repository DemoRepository --domain my-company --domain-owner ... --region us-east-1</code></p> <p>Manual setup: pulling from your repository with pip 1. Fetch a new authorization token using the AWS CLI <code>export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain -my-company --domain-owner ... --region us-east-1 --query authorizationToken --output text)</code> 2. Set the CodeArtifact registry URL and credentials using pip config <code>pip config set global.index-url https://aws:$CODEARTIFACT_AUTH_TOKEN@my-company-....d.codeartifact.us-east-1.amazonaws.com/pypi/DemoRepository/simple/</code></p>"},{"location":"Gameday/Gameday%20Simulation/","title":"Test Project Gameday Simulation","text":""},{"location":"Gameday/Gameday%20Simulation/#task","title":"Task","text":"<p>In this Test Project, you'll need to host binaries containing a simple application. The hosting must meet the pillars of AWS's Well Architect Framework, particularly Operational Excellence, Performance Efficiency, and Reliability.</p> <p>Consider the cost, deployment speed of each new binary, content delivery latency, and service scalability. Every minute, millions of users are trying to access your website through the endpoint.</p> <p>For the start of the project, only one binary will be available, and during the course of the 2 hours, the other binaries will be made available and you will need to update the hosted application and submit the new endpoint of the new version of the application.</p>"},{"location":"Gameday/Gameday%20Simulation/#binaries","title":"Binaries","text":"<p>Binary 1 Binary 2 Binary 3</p>"},{"location":"Gameday/Gameday%20Simulation/#validation-with-k6","title":"Validation with k6","text":"<p>To validate the first binary, run the following code with <code>k6 run validate_server1.js</code>: validate_server1.js<pre><code>import http from 'k6/http';\nimport { sleep } from 'k6';\n\nexport const options = {\n  stages: [\n    { duration: '30s', target: 50 },\n    { duration: '1m', target: 100 },\n    { duration: '30s', target: 200 },\n    { duration: '1m', target: 200 },\n    { duration: '30s', target: 0 },\n  ],\n  thresholds: {\n    http_req_failed: ['rate&lt;0.01'],\n    http_req_duration: ['p(95)&lt;500'],\n  },\n};\n\nfunction cpuIntensiveOperation() {\n  const endpoints = [\n    '/calculate?n=1000',\n    '/search?q=stress',\n    '/render',\n  ];\n  return endpoints[Math.floor(Math.random() * endpoints.length)];\n}\n\nexport default function () {\n  const url = `http://alb-teste-1609956826.us-east-1.elb.amazonaws.com${cpuIntensiveOperation()}`;\n\n  if (Math.random() &gt; 0.5) {\n    http.get(url);\n  } else {\n    http.post(url, JSON.stringify({ data: 'payload-' + Math.random() }), {\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  sleep(Math.random() * 2);\n}\n</code></pre></p> <p>To validate the second binary, run the following code with <code>k6 run validate_server2.js</code>: validate_server2.js<pre><code>import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Trend, Rate } from 'k6/metrics';\n\nconst responseTime = new Trend('response_time');\nconst errorRate = new Rate('error_rate');\n\nexport const options = {\n  stages: [\n    { duration: '1m', target: 50 },\n    { duration: '3m', target: 100 },\n    { duration: '1m', target: 0 },\n  ],\n  thresholds: {\n    http_req_duration: ['p(95)&lt;500'],\n    error_rate: ['rate&lt;0.05'],\n  },\n  noConnectionReuse: true,\n  userAgent: 'k6-load-test/1.0',\n  insecureSkipTLSVerify: true,\n  tlsVersion: {\n    min: 'tls1.2',\n    max: 'tls1.3'\n  }\n};\n\nexport default function () {\n  const baseUrl = 'https://www.cloudjuliolab.click';\n  const endpoints = [\n    '/search?q=stress',\n    '/calculate?n=25',\n    '/status'\n  ];\n\n  const params = {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    },\n    timeout: '60s',\n    tags: {\n      test_type: 'load_test'\n    }\n  };\n\n  try {\n    const url = `${baseUrl}${endpoints[Math.floor(Math.random() * endpoints.length)]}`;\n\n    const res = http.get(url, params);\n\n    responseTime.add(res.timings.duration);\n    errorRate.add(res.status !== 200);\n\n    check(res, {\n      'status is 200': (r) =&gt; r.status === 200,\n      'response time OK': (r) =&gt; r.timings.duration &lt; 1000,\n    });\n\n  } catch (error) {\n    errorRate.add(1);\n    console.error(`Request failed: ${error}`);\n  }\n\n  sleep(Math.random() * 2);\n}\n</code></pre></p> <p>To validate the third binary, run the following code with <code>k6 run validate_server3.js</code>: validate_server3.js<pre><code>import http from 'k6/http';\nimport { check, sleep } from 'k6';\nimport { Trend, Rate } from 'k6/metrics';\n\nexport const options = {\n  vus: 10,\n  duration: '3m',\n  insecureSkipTLSVerify: true,\n  thresholds: {\n    http_req_failed: ['rate&lt;0.05'],\n    http_req_duration: ['p(95)&lt;1500']\n  }\n};\n\nconst metrics = {\n  matrix: {\n    responseTime: new Trend('matrix_time'),\n    errorRate: new Rate('matrix_errors')\n  },\n  monteCarlo: {\n    responseTime: new Trend('montecarlo_time'),\n    errorRate: new Rate('montecarlo_errors')\n  },\n  primes: {\n    responseTime: new Trend('primes_time'),\n    errorRate: new Rate('primes_errors')\n  },\n  alloc: {\n    responseTime: new Trend('alloc_time'),\n    errorRate: new Rate('alloc_errors')\n  }\n};\n\nconst BASE_URL = 'https://www.cloudjuliolab.click/';\n\nfunction testMatrix() {\n  const size = Math.floor(Math.random() * 400) + 100;\n  const params = {\n    timeout: '30s',\n    tags: { endpoint: 'matrix' }\n  };\n\n  const res = http.get(`${BASE_URL}/matrix?size=${size}`, params);\n\n  metrics.matrix.responseTime.add(res.timings.duration);\n  metrics.matrix.errorRate.add(res.status !== 200);\n\n  check(res, {\n    'matrix status 200': (r) =&gt; r.status === 200,\n    'matrix response &lt;2s': (r) =&gt; r.timings.duration &lt; 2000\n  });\n}\n\nfunction testMonteCarlo() {\n  const iterations = Math.floor(Math.random() * 9e6) + 1e6;\n  const params = {\n    timeout: '45s',\n    tags: { endpoint: 'montecarlo' }\n  };\n\n  const res = http.get(`${BASE_URL}/monte-carlo?iterations=${iterations}`, params);\n\n  metrics.monteCarlo.responseTime.add(res.timings.duration);\n  metrics.monteCarlo.errorRate.add(res.status !== 200);\n\n  check(res, {\n    'montecarlo status 200': (r) =&gt; r.status === 200,\n    'montecarlo response &lt;5s': (r) =&gt; r.timings.duration &lt; 5000\n  });\n}\n\nfunction testPrimes() {\n  const limit = Math.floor(Math.random() * 9e5) + 1e5;\n  const params = {\n    timeout: '30s',\n    tags: { endpoint: 'primes' }\n  };\n\n  const res = http.get(`${BASE_URL}/primes?limit=${limit}`, params);\n\n  metrics.primes.responseTime.add(res.timings.duration);\n  metrics.primes.errorRate.add(res.status !== 200);\n\n  check(res, {\n    'primes status 200': (r) =&gt; r.status === 200,\n    'primes response &lt;3s': (r) =&gt; r.timings.duration &lt; 3000\n  });\n}\n\nfunction testAlloc() {\n  const mb = Math.floor(Math.random() * 90) + 10;\n  const params = {\n    timeout: '30s',\n    tags: { endpoint: 'alloc' }\n  };\n\n  const res = http.get(`${BASE_URL}/alloc?mb=${mb}`, params);\n\n  metrics.alloc.responseTime.add(res.timings.duration);\n  metrics.alloc.errorRate.add(res.status !== 200);\n\n  check(res, {\n    'alloc status 200': (r) =&gt; r.status === 200,\n    'alloc response &lt;2s': (r) =&gt; r.timings.duration &lt; 2000\n  });\n}\n\nexport default function () {\n  const rand = Math.random();\n  if (rand &lt; 0.25) {\n    testMatrix();\n  } else if (rand &lt; 0.5) {\n    testMonteCarlo();\n  } else if (rand &lt; 0.75) {\n    testPrimes();\n  } else {\n    testAlloc();\n  }\n\n  sleep(Math.random() * 2);\n}\n</code></pre></p>"}]}